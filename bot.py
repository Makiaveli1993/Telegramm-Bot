import sys
import asyncio
import json
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from playwright.async_api import async_playwright

# –§–∏–∫—Å asyncio –ø–æ–¥ Python 3.11 –¥–ª—è Windows
if sys.platform.startswith('win') and sys.version_info >= (3, 8):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

TOKEN = "7786714298:AAFlqibLEF4y-LlJny2eJGYgM3wp0L__8kE"
REQUESTS_FILE = "requests.json"

# üñ•Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å emoji
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üè™ –í–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="login")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", callback_data="change_store")],
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
        [InlineKeyboardButton("üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="subscribe_channel")]
    ]
    return InlineKeyboardMarkup(keyboard)

# üîô –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def get_back_menu():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )

# üö© –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –≥–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤.",
        reply_markup=get_main_menu()
    )

# üåü –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
from subprocess import run
import sys

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    match query.data:
        case "login":
            await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")

            # —Ç–µ–ø–µ—Ä—å –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π subprocess
            result = run([sys.executable, "wb_cookie_checker_sync.py"], capture_output=True, text=True)

            if result.returncode == 0:
                await query.edit_message_text("‚úÖ –ö—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã, –≤—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥...")
                result_auto_login = run(
                    [sys.executable, "wb_auto_login.py"],
                    capture_output=True, text=True
                )
                if result_auto_login.returncode == 0:
                    await query.edit_message_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=get_back_menu())
                else:
                    await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞:\n{result_auto_login.stderr}", reply_markup=get_back_menu())
            else:
                await query.edit_message_text("‚ö†Ô∏è –ö—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                result_manual_auth = run(
                    [sys.executable, "wb_auth.py"],
                    capture_output=True, text=True
                )
                if result_manual_auth.returncode == 0:
                    await query.edit_message_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_back_menu())
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{result_manual_auth.stderr}", reply_markup=get_back_menu())

        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ case –Ω–µ –º–µ–Ω—è–π, –æ—Å—Ç–∞–≤–ª—è–π –∫–∞–∫ –µ—Å—Ç—å
        case "change_store":
            await query.edit_message_text("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=get_back_menu())

        case "create_request":
            await query.edit_message_text("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=get_back_menu())

        case "my_requests":
            try:
                with open(REQUESTS_FILE, "r", encoding="utf-8") as file:
                    requests = json.load(file)

                if not requests:
                    await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_back_menu())
                    return

                messages = []
                for req in requests:
                    messages.append(
                        f"üìå –ê—Ä—Ç–∏–∫—É–ª: {req['article']}\n"
                        f"üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {req['quantity']}\n"
                        f"üè¨ –ò–∑: {req['from_warehouse']} ‚û°Ô∏è –í: {req['to_warehouse']}\n"
                        f"üè∑ –°—Ç–∞—Ç—É—Å: {req['status']}"
                    )

                await query.edit_message_text("\n\n".join(messages), reply_markup=get_back_menu())
            except FileNotFoundError:
                await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_back_menu())

        case "subscribe_channel":
            await query.edit_message_text("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=get_back_menu())

        case "main_menu":
            await query.edit_message_text(
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )


# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    print("ü§ñ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling()

if __name__ == "__main__":
    main()

